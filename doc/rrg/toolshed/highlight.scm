(define-record-type adorned-char
  (make-adorned-char char kind message)
  adorned-char?
  (char get-char set-char!)
  (kind get-kind set-kind!)
  (message get-message set-message!))

(define (adorn-char char)
  (make-adorned-char char 'tbd #f))

(define (fresh-kind char)
  (cond ((abbrev-first? char) 'abbrev)
        ((backslash?    char) 'infix)
        ((digit10?      char) 'number10)
        ((bar?          char) 'identifier)
        ((brace?        char) 'brace)
        ((bracket?      char) 'bracket)
        ((dot?          char) 'dot)
        ((paren?        char) 'paren)
        ((quotation?    char) 'string)
        ((semicolon?    char) 'line-comment)
        ((whitespace?   char) 'whitespace)
        (else                 'tbd)))

(define (fresh-message char)
  (cond ((bar?        char) 'identifier)
        ((comma?      char) 'abbrev-if-@)
        ((octothorpe? char) 'special-start)
        ((quotation?  char) 'string)
        ((semicolon?  char) 'line-comment)
        (else                #f)))

(define (refresh! ac)
  (let ((char (get-char ac)))
    (set-kind! ac (fresh-kind char))
    (set-message! ac (fresh-message char))))

(define (invalidate! ac)
  (set-kind! ac 'invalid)
  (set-message! ac 'invalid))
;-----------------------------------------------------------------------------;
(define (char-in? list-of-chars char)
  (member char list-of-chars char=?))

(define (ampersand?   c) (char=?       #\&                          c))
(define (apostrophe?  c) (char=?       #\'                          c))
(define (at?          c) (char=?       #\@                          c))
(define (backslash?   c) (char=?       #\\                          c))
(define (bar?         c) (char=?       #\|                          c))
(define (brace?       c) (char-in? '(  #\{        #\}             ) c))
(define (bracket?     c) (char-in? '(  #\[        #\]             ) c))
(define (colon?       c) (char=?       #\:                          c))
(define (comma?       c) (char=?       #\,                          c))
(define (dot?         c) (char=?       #\.                          c))
(define (exclamation? c) (char=?       #\!                          c))
(define (grave?       c) (char=?       #\`                          c))
(define (lbrace?      c) (char=?       #\{                          c))
(define (lbracket?    c) (char=?       #\[                          c))
(define (lparen?      c) (char=?       #\(                          c))
(define (newline?     c) (char=?       #\newline                    c))
(define (octothorpe?  c) (char=?       #\#                          c))
(define (paren?       c) (char-in? '(  #\(        #\)             ) c))
(define (quotation?   c) (char=?       #\"                          c))
(define (rbrace?      c) (char=?       #\}                          c))
(define (rbracket?    c) (char=?       #\]                          c))
(define (rparen?      c) (char=?       #\)                          c))
(define (semicolon?   c) (char=?       #\;                          c))
(define (tilde?       c) (char=?       #\~                          c))
(define (whitespace?  c) (char-in? '(  #\newline  #\space  #\tab  ) c))
;-----------------------------------------------------------------------------;
(define (digit2?  c) (char-in? '( #\0 #\1 ) c))
(define (digit8?  c) (char-in? '( #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 ) c))
(define (digit10? c) (char-in? '( #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 ) c))
(define (digit16? c) (char-in? '( #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9
                                  #\a #\b #\c #\d #\e #\f
                                  #\A #\B #\C #\D #\E #\F ) c))
;-----------------------------------------------------------------------------;
(define (abbrev-first? c)
  (or (apostrophe? c) (grave? c) (comma? c)))

(define (delimiter? c)
  (or (bar? c) (paren? c) (quotation? c) (semicolon? c) (whitespace? c)))

(define (exactness-char? c)
  (char-in? '( #\e #\i ) c))

(define (exponent-or-precision-char? c)
  (char-in? '( #\e #\s #\f #\d #\l
               #\E #\S #\F #\D #\L ) c))

(define (hvector-letter? c)
  (char-in? '( #\f #\s #\u ) c))

(define named-chars
  (list "alarm" "backspace" "delete" "esc" "escape" "linefeed" "newline"
        "nul" "null" "page" "return" "space" "tab" "vtab"))

(define named-char-firsts
  (letrec ((dedup (lambda (new old)
                    (cond ((null? old) new)
                          ((member (car old) new char=?)
                           (dedup new (cdr old)))
                          (else (dedup (cons (car old) new) (cdr old)))))))
    (list-sort char<? (dedup '() (map car (map string->list named-chars))))))

(define (radix-char? c)
  (char-in? '( #\x #\d #\o #\b ) c))
;-----------------------------------------------------------------------------;
(define (preceding-tbd ac-list)
  (list->string (let loop ((new '()) (old ac-list))
                  (if (null? old)
                      new
                      (let ((first (car old)))
                        (if (eq? 'tbd (get-kind first))
                            (loop (cons (get-char first) new)
                                  (cdr old))
                            new))))))

(define (tbd-spells-char? ac-list)
  (member (preceding-tbd ac-list)
          (map (lambda (s) (string-append "#\\" s)) named-chars)
          string=?))

(define (revise-kinds! ac-list old-kind new-kind)
  (call/cc (lambda (done)
             (for-each (lambda (ac)
                         (let ((ac-kind (get-kind ac)))
                           (if (eq? old-kind ac-kind)
                               (set-kind! ac new-kind)
                               (done new-kind))))
                       ac-list))))

(define (adorn-list char-list)
  (let loop ((adorned '()) (unadorned char-list))
    (if (null? unadorned)
        (reverse adorned)
        (loop (cons (adorn (car unadorned) adorned) adorned)
              (cdr unadorned)))))

(define (adorn next rest)
  (let ((next (adorn-char next)))
    (if (null? rest)
        next
        (let ((nc (get-char next))
              (prev (car rest)))
          (let ((pc (get-char prev))
                (pk (get-kind prev))
                (pm (get-message prev)))
            (cond ((and (eq? 'invalid pm) (not (delimiter? nc)))
                   (invalidate! next))
                  ((eq? 'identifier pm)
                   (cond ((and (char=? #\| nc) (not (char=? #\\ pc)))
                          (set-message! next #f))
                         (else (set-message! next 'identifier)))
                   (set-kind! next 'identifier))
                  ((eq? 'line-comment pm)
                   (cond ((char=? #\newline nc) (refresh! next))
                         (else (set-kind! next 'line-comment)
                               (set-message! next 'line-comment))))
                  ((eq? 'string pm)
                   (cond ((and (char=? #\" nc) (not (char=? #\\ pc)))
                          (set-message! next #f))
                         (else (set-message! next 'string)))
                   (set-kind! next 'string))
                  ((eq? 'char-init pm)
                   (set-message! next 'char-first))
                  ((eq? 'char-first pm)
                   (cond ((delimiter? nc)
                          (revise-kinds! rest 'tbd 'char)
                          (refresh! next))
                         ((member pc named-char-firsts char=?)
                          (set-message! next 'char-named))
                         (else (invalidate! next))))
                  ((eq? 'char-named pm)
                   (cond ((delimiter? nc)
                          (revise-kinds! rest 'tbd (if (tbd-spells-char? rest)
                                                       'char
                                                       'invalid))
                          (refresh! next))
                         (else (set-message! next 'char-named))))
                  ((eq? 'special-start pm)
                   (cond ((ampersand? nc)
                          (revise-kinds! rest 'tbd 'box)
                          (set-kind! next 'box))
                         ((backslash? nc)
                          (set-message! next 'char-init))
                         ((bar? nc)
                          (set-kind! next 'nested-comment)
                          (set-message! next 'nested-comment))
                         ((char=? #\f nc)
                          (set-message! next 'false-or-fvector))
                         ((char=? #\s nc)
                          (set-message! next 'svector))
                         ((char=? #\t nc)
                          (set-message! next 'true))
                         ((char=? #\u nc)
                          (set-message! next 'uvector))
                         ((digit10? nc)
                          (set-message! next 'label-or-reference-or-serial))
                         ((exclamation? nc)
                          (set-message! next 'directive-or-sharp-object))
                         ((exactness-char? nc)
                          (set-message! next 'radix-or-digit10))
                         ((lparen? nc)
                          (set-message! next 'vector-init))
                         ((radix-char? nc)
                          (set-message! next ((cond ((char=? #\x nc)
                                                     'exactness-or-digit16)
                                                    ((char=? #\d nc)
                                                     'exactness-or-digit10)
                                                    ((char=? #\o nc)
                                                     'exactness-or-digit8)
                                                    ((char=? #\b nc)
                                                     'exactness-or-digit2)
                                                    (else 'invalid)))))
                         ((semicolon? nc)
                          (set-kind! next 'datum-comment)
                          (set-message! 'datum-comment))
                         (else
                          (invalidate! next))))
                  (else (refresh! next)))
            next)))))
