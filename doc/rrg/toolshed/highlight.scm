(define-record-type adorned-char
  (make-adorned-char char kind message)
  adorned-char?
  (char get-char set-char!)
  (kind get-kind set-kind!)
  (message get-message set-message!))

(define (adorn-char char)
  (make-adorned-char char 'tbd #f))

(define (char-in char list-of-chars)
  (member char list-of-chars char=?))

(define (fresh-kind c)
  (cond ((char=? c #\.)                            'dot)
        ((char=? c #\|)                            'identifier)
        ((char=? c #\\)                            'infix)
        ((char=? c #\;)                            'line-comment)
        ((char=? c #\")                            'string)
        ((char-in c '( #\' #\` #\, ))              'abbrev)
        ((char-in c '( #\{ #\} ))                  'brace)
        ((char-in c '( #\[ #\] ))                  'bracket)
        ((char-in c '( #\( #\) ))                  'list)
        ((char-in c '( #\newline #\space #\tab ))  'whitespace)
        (else                                      'tbd)))

(define (fresh-message c)
  (cond ((char=? c #\|)  'identifier)
        ((char=? c #\,)  'abbrev-if-@)
        ((char=? c #\#)  'octothorpe-begin)
        ((char=? c #\")  'string)
        ((char=? c #\;)  'line-comment)
        (else            #f)))

(define (refresh! ac)
  (let ((c (get-char ac)))
    (set-kind! ac (fresh-kind c))
    (set-message! ac (fresh-message c))))

(define (invalidate! ac)
  (set-kind! ac 'invalid)
  (set-message! ac 'invalid))
;-----------------------------------------------------------------------------;
(define (digit2?  c) (char-in c '( #\0 #\1 )))
(define (digit8?  c) (char-in c '( #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 )))
(define (digit10? c) (char-in c '( #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 )))
(define (digit16? c) (char-in c '( #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9
                                   #\a #\b #\c #\d #\e #\f
                                   #\A #\B #\C #\D #\E #\F )))
;-----------------------------------------------------------------------------;
(define (delimiter? c)
  (char-in c '( #\| #\( #\) #\" #\; #\newline #\space #\tab )))

(define (exactness-char? c)
  (char-in c '( #\e #\i )))

(define (exponent-or-precision-char? c)
  (char-in c '( #\e #\s #\f #\d #\l #\E #\S #\F #\D #\L )))

(define (radix-char? c)
  (char-in c '( #\x #\d #\o #\b )))
;-----------------------------------------------------------------------------;
(define (preceding-tbd ac-list)
  (list->string (let loop ((new '()) (old ac-list))
                  (if (null? old)
                      new
                      (let ((first (car old)))
                        (if (eq? (get-kind first) 'tbd)
                            (loop (cons (get-char first) new)
                                  (cdr old))
                            new))))))

(define (tbd-in token ac-list)
  (member
   (preceding-tbd ac-list)
   (cadr (assq token
               '((char ("#\\null" "#\\alarm" "#\\backspace" "#\\tab" "#\\space"
                        "#\\newline" "#\\return" "#\\delete" "#\\escape"
                        "#\\page" "#\\vtab" "#\\esc" "#\\linefeed" "#\\nul"))
                 (directive ("#!fold-case" "#!no-fold-case"))
                 (false ("#f" "#false"))
                 (fvector ("#f32" "#f64"))
                 (runtime-syntax ("and" "begin" "c-declare" "c-define"
                                  "c-define-type" "c-initialize" "c-lambda"
                                  "case" "case-lambda" "cond" "cond-expand"
                                  "declare" "define" "define-library"
                                  "define-macro" "define-record-type"
                                  "define-structure" "define-syntax"
                                  "define-type" "define-type-of-thread"
                                  "define-values" "delay" "delay-force" "do"
                                  "future" "guard" "if" "import" "include"
                                  "include-ci" "lambda" "let" "let*"
                                  "let*-values" "let-values" "letrec" "letrec*"
                                  "letrec*-values" "letrec-values" "namespace"
                                  "or" "parameterize" "quasiquote" "quote"
                                  "r7rs-guard" "receive" "set!" "syntax-error"
                                  "syntax-rules" "this-source-file" "unless"
                                  "when"))
                 (sharp ("#!eof" "#!key" "#!optional" "#!rest" "#!void"))
                 (svector ("#s8" "#s16" "#s32" "#s64"))
                 (true ("#t" "#true"))
                 (uvector ("#u8" "#u16" "#u32" "#u64")))))
   string=?))

(define (vector-string->symbol s)
  (string->symbol (string-append (string-copy s 1) "vector")))

;; (define (nest-level ac-list 'kind)
;;   (if (null? ac-list)
;;       0
;;       (if (char=?

(define (revise-kinds! ac-list new-kind . optional-old-kind)
  (call-with-current-continuation
   (lambda (done)
     (let ((old-kind (if (null? optional-old-kind)
                         'tbd
                         (car optional-old-kind))))
       (let loop ((rest ac-list))
         (if (null? rest)
             #t
             (let ((ac (car rest)))
               (if (eq? (get-kind ac) old-kind)
                   (begin (set-kind! ac new-kind)
                          (loop (cdr rest)))
                   (done new-kind)))))))))

(define (revise-list-or-vector-kinds! ac-list)
  (let ((eligible-kinds '(list fvector svector uvector vector))
        (empty? #t))
    (let loop ((rest ac-list))
      (if (null? rest)
          #f
          (let* ((ac (car rest))
                 (kind (get-kind ac)))
            (guard (s ((eq? s 'revise)
                       (let ((new-kind (string->symbol (string-append
                                                        (symbol->string kind)
                                                        "-empty"))))
                         (revise-kinds! rest new-kind kind)
                         ac))
                      ((eq? s 'abort) ac))
              (cond ((and (not (char=? (get-char ac) #\)))
                          (memq kind eligible-kinds)) (if empty?
                                                          (raise 'revise)
                                                          (raise 'abort)))
                    ((eq? kind 'whitespace) (loop (cdr rest)))
                    (else (when empty? (set! empty? #f))
                          (loop (cdr rest))))))))))

(define (adorn-list char-list)
  (let loop ((adorned '()) (unadorned char-list))
    (if (null? unadorned)
        (reverse adorned)
        (loop (cons (adorn! (car unadorned) adorned) adorned)
              (cdr unadorned)))))

(define (adorn! next-unadorned-char rest)
  (let ((nac (adorn-char next-unadorned-char)))
    (if (null? rest)
        (begin (refresh! nac)
               (when (char=? (get-char nac) #\()
                 (set-message! nac 1)))
        (let ((nc (get-char nac))
              (prev (car rest)))
          (let ((pc (get-char prev))
                (pk (get-kind prev))
                (pm (get-message prev)))
            (cond ((not (symbol? pm))
                   (refresh! nac)
                   (when (delimiter? nc)
                     (if (char=? #\: pc)
                         (let ((dr (cdr rest)))
                           (if (not (or (null? dr)
                                        (delimiter? (get-char (car dr)))))
                               (revise-kinds! rest 'keyword)
                               (revise-kinds! rest 'default)))
                         (if (tbd-in 'runtime-syntax rest)
                             (revise-kinds! rest 'runtime-syntax)
                             (revise-kinds! rest 'default)))))
                  ((eq? pm 'invalid)
                   (if (delimiter? nc)
                       (refresh! nac)
                       (invalidate! nac)))
                  ((eq? pm 'identifier)
                   (set-kind! nac 'identifier)
                   (if (and (char=? nc #\|) (not (char=? pc #\\)))
                       (set-message! nac #f)
                       (set-message! nac 'identifier)))
                  ((eq? pm 'line-comment)
                   (if (char=? nc #\newline)
                       (refresh! nac)
                       (begin (set-kind! nac 'line-comment)
                              (set-message! nac 'line-comment))))
                  ((eq? pm 'string)
                   (set-kind! nac 'string)
                   (if (and (char=? nc #\") (not (char=? pc #\\)))
                       (set-message! nac #f)
                       (set-message! nac 'string)))
                  ((eq? pm 'char-begin)
                   (set-message! nac 'char-first))
                  ((eq? pm 'char-first)
                   (if (delimiter? nc)
                       (begin (revise-kinds! rest 'char)
                              (refresh! nac))
                       (set-message! nac 'named-char)))
                  ((eq? pm 'named-char)
                   (if (delimiter? nc)
                       (begin (revise-kinds! rest (if (tbd-in 'char rest)
                                                      'char
                                                      'invalid))
                              (refresh! nac))
                       (set-message! nac 'named-char)))
                  ((eq? pm 'directive-or-sharp)
                   (if (delimiter? nc)
                       (begin (refresh! nac)
                              (if (tbd-in 'directive rest)
                                  (revise-kinds! rest 'directive)
                                  (if (tbd-in 'sharp rest)
                                      (revise-kinds! rest 'sharp)
                                      (revise-kinds! rest 'invalid))))
                       (set-message! nac 'directive-or-sharp)))
                  ((memq pm '(svector uvector))
                   (if (delimiter? nc)
                       (if (char=? nc #\()
                           (let ((tbd (tbd-in pm rest)))
                             (if tbd
                                 (let ((nk (vector-string->symbol (car tbd))))
                                   (begin (set-kind! nac nk)
                                          (revise-kinds! rest nk)))
                                 (begin (refresh! nac)
                                        (revise-kinds! rest 'invalid))))
                           (begin (refresh! nac)
                                  (revise-kinds! rest 'invalid)))
                       (set-message! nac pm)))
                  ((eq? pm 'false-or-fvector)
                   (if (delimiter? nc)
                       (if (char=? nc #\()
                           (let ((tbd (tbd-in 'fvector rest)))
                             (if tbd
                                 (let ((nk (vector-string->symbol (car tbd))))
                                   (begin (set-kind! nac nk)
                                          (revise-kinds! rest nk)))
                                 (begin (refresh! nac)
                                        (revise-kinds! rest 'invalid))))
                           (begin (refresh! nac)
                                  (revise-kinds! rest (if (tbd-in 'false rest)
                                                          'boolean
                                                          'invalid))))
                       (set-message! nac 'false-or-fvector)))
                  ((eq? pm 'true)
                   (if (delimiter? nc)
                       (begin (revise-kinds! rest (if (tbd-in 'true rest)
                                                      'boolean
                                                      'invalid))
                              (refresh! nac))
                       (set-message! nac 'true)))
                  ((eq? pm 'octothorpe-begin)
                   (cond ((char=? nc #\&)
                          (set-kind! nac (revise-kinds! rest 'box)))
                         ((char=? nc #\\)
                          (set-message! nac 'char-begin))
                         ((char=? nc #\|)
                          (set-kind! nac 'nested-comment)
                          (set-message! nac 'nested-comment))
                         ((char=? nc #\f)
                          (set-message! nac 'false-or-fvector))
                         ((char=? nc #\s)
                          (set-message! nac 'svector))
                         ((char=? nc #\t)
                          (set-message! nac 'true))
                         ((char=? nc #\u)
                          (set-message! nac 'uvector))
                         ((digit10? nc)
                          (set-message! nac 'label-or-reference-or-serial))
                         ((char=? nc #\!)
                          (set-message! nac 'directive-or-sharp))
                         ((exactness-char? nc)
                          (set-message! nac 'radix-or-digit10))
                         ((char=? nc #\()
                          (set-kind! nac (revise-kinds! rest 'vector)))
                         ((radix-char? nc)
                          (set-message! nac ((cond ((char=? nc #\x)
                                                    'exactness-or-digit16)
                                                   ((char=? nc #\d)
                                                    'exactness-or-digit10)
                                                   ((char=? nc #\o)
                                                    'exactness-or-digit8)
                                                   ((char=? nc #\b)
                                                    'exactness-or-digit2)
                                                   (else 'invalid)))))
                         ((char=? nc #\;)
                          (set-kind! nac 'datum-comment)
                          (set-message! 'datum-comment))
                         (else
                          (invalidate! nac))))
                  (else (refresh! nac))))))
    nac))



                  ;; ((not (symbol? pm))
                  ;;  (cond ((delimiter? nc)
                  ;;         (if (char=? #\: pc)
                  ;;             (let ((dr (cdr rest)))
                  ;;               (if (not (or (null? dr)
                  ;;                            (delimiter? (get-char (car dr)))))
                  ;;                   (revise-kinds! rest 'keyword)
                  ;;                   (revise-kinds! rest 'default)))
                  ;;             (if (tbd-is? 'runtime-syntax rest)
                  ;;                 (revise-kinds! rest 'runtime-syntax)
                  ;;                 (revise-kinds! rest 'default))))))
                         ;;  (if (char=? #\( pc)

                         ;;        (if (and (not (null? dr))
                         ;;                 (not (delimiter? (get-char (car dr)))))
                         ;;            (revise-kinds! rest 'keyword)
                         ;;            (revise-kinds! rest 'default)))
                         ;; (if (tbd-is? 'runtime-syntax rest)
                         ;;     (revise-kinds! rest 'runtime-syntax)
                         ;;     (revise-kinds! rest 'default)))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                   ;; (cond ((char=? nc #\()
                   ;;        (                    

                   ;; (when (char=? nc #\))
                   ;;   (let ((opening-ac (revise-list-or-vector-kinds! rest)))
                   ;;     (if opening-ac
                   ;;         (begin (set-kind! nac (get-kind opening-ac))
                   ;;                (set-message! nac (get-message opening-ac)))
                   ;;         (invalidate! nac))))
                   
                     

                   ;; (and (not pm) (delimiter? nc))
                   ;; (let ((cdr-rest (cdr rest)))
                   ;;   (cond ((and (char=? #\: pc)
                   ;;               (not (null? cdr-rest))
                   ;;               (not (delimiter? (get-char (car cdr-rest)))))
                   ;;          (revise-kinds! rest 'keyword))
                   ;;         ((tbd-is? 'runtime-syntax rest)
                   ;;          (revise-kinds! rest 'runtime-syntax))
                   ;;         (else (revise-kinds! rest 'default))))
                   ;; (refresh! nac)
                   ;; (when (char=? nc #\))
                   ;;   (let ((beginning-ac (revise-list-or-vector-kinds! rest)))
                   ;;     (when (adorned-char? beginning-ac)
                   ;;       (let ((beginning-c (get-char beginning-ac))
                   ;;             (beginning-kind (get-kind beginning-ac)))
                   ;;         (when (char=? beginning-c #\()
                   ;;           (set-kind! nac beginning-kind))))))
                   ;; (cond ((char=? nc #\()
                   ;;        (set-message! nac (+ (get-nesting prev) 1)))
                   ;;       ((char=? nc #\))
                   ;;        (set-nesting! nac (- (get-nesting prev) 1)))
                   ;;       (else (set-nesting! nac (get-nesting prev)))))

                       ;; (not (or pm (char-in nc '(#\( #\)))))
